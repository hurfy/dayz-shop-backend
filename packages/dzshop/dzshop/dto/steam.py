from pydantic import BaseModel, Field
from typing   import Literal, Any


# dto cause used in modules
class SteamLogin(BaseModel):
    assoc_handle: str = Field(
        title="Association id",
        examples=["1234567890"],
    )
    claimed_id: str = Field(
        title="Unique user id",
        examples=[r"https://steamcommunity.com/openid/id/76562199443794494"],
    )
    identity: str = Field(
        title="OpenID source identifier",
        examples=[r"https://steamcommunity.com/openid/id/76561199223994494"],
    )
    mode: Literal["id_res"] = Field(
        title="Operation type",
        examples=["id_res"],
    )
    ns: Literal[r"http://specs.openid.net/auth/2.0"] = Field(
        title="OpenID protocol version",
        examples=[r"http://specs.openid.net/auth/2.0"],
    )
    op_endpoint: str = Field(
        title="Authentication server address",
        examples=[r"https://steamcommunity.com/openid/login"],
    )
    response_nonce: str = Field(
        title="Random value",
        description="Generated by the OpenID server to prevent replay attacks",
        examples=["2024-12-17T04:56:48ZL3ITMl6EOXRdr0+/9kJh/YG/oNs="],
    )
    return_to: str = Field(
        title="Redirection URL after authentication",
        examples=[r"https://exs.shop/"],
    )
    sig: str = Field(
        title="Signature",
        examples=["qV9ISwXT3B5SFi4ZwCJvrbryYoB="],
    )
    signed: str = Field(
        title="Signature",
        description="A list of parameters that have been signed by the OpenID server to ensure their integrity",
        examples=["signed,op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle"],
    )

    def model_dump(self, check: bool = False, *args, **kwargs) -> dict[str, Any]:
        """model_dump ..."""
        dumped = super().model_dump(*args, **kwargs)

        # Modify the default data by adding the suffix “openid.” to the parameter name
        converted = {f"openid.{k}": v for k, v in dumped.items()}

        # If the check flag is set to True - add a "mode" parameter
        if check:
            converted["openid.mode"] = "check_authentication"

        return converted
